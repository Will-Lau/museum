<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="museum.museum.dao.QuestionSetMapper" >
  <resultMap id="BaseResultMap" type="museum.museum.Entity.QuestionSet" >
    <id column="qs_id" property="qsId" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="accuracy" property="accuracy" jdbcType="DOUBLE" />
    <result column="finish_time" property="finishTime" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="kind" property="kind" jdbcType="VARCHAR" />
    <result column="degree" property="degree" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ProcessResultMap" type="museum.museum.Response.QuestionSetProcessResponse" >
    <result column="kind" property="kind" jdbcType="VARCHAR" />
    <result column="degree" property="degree" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="MyResultMap" type="museum.museum.Response.MaxAccuarcyByDegree" >
    <result column="accuracy" property="accuracy" jdbcType="DOUBLE" />
    <result column="degree" property="degree" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    qs_id, user_id, accuracy, finish_time, status, kind, degree
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="museum.museum.Entity.QuestionSetExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from QuestionSet
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>

  <!--获得用户所有类别的做题进度-->
  <select id="getProgress" resultMap="ProcessResultMap" parameterType="java.lang.String">
    select
    kind,max(degree) as degree
    from QuestionSet
    where user_id = #{userId,jdbcType=VARCHAR} and status='graded' and accuracy>=0.8 GROUP BY kind
  </select>

  <!--获得用户某一类别的做题进度-->
  <select id="getProgressByKind" resultMap="BaseResultMap" parameterType="java.lang.String">
    select
    <include refid="Base_Column_List" />
    FROM QuestionSet
    WHERE
    user_id=#{userId,jdbcType=VARCHAR} and
    kind=#{kind,jdbcType=VARCHAR} and
    degree in
    (select
    max(degree) as degree
    from QuestionSet
    where user_id = #{userId,jdbcType=VARCHAR} and status='graded' and kind=#{kind,jdbcType=VARCHAR} and accuracy>=0.8)
    limit 1
  </select>

  <!--获得用户某一类别的每个难度的最高正确率-->
  <select id="getMaxAccuracyGuoupByDegree" resultMap="MyResultMap" parameterType="java.lang.String">
    select
    degree,max(accuracy) as accuracy
    from QuestionSet
    where user_id=#{userId,jdbcType=VARCHAR} and status='graded' and kind=#{kind,jdbcType=VARCHAR} GROUP BY degree;
  </select>


  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select
    <include refid="Base_Column_List" />
    from QuestionSet
    where qs_id = #{qsId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from QuestionSet
    where qs_id = #{qsId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="museum.museum.Entity.QuestionSetExample" >
    delete from QuestionSet
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="museum.museum.Entity.QuestionSet" >
    insert into QuestionSet (qs_id, user_id, accuracy,
    finish_time, status, kind,
    degree)
    values (#{qsId,jdbcType=BIGINT}, #{userId,jdbcType=VARCHAR}, #{accuracy,jdbcType=DOUBLE},
    #{finishTime,jdbcType=TIMESTAMP}, #{status,jdbcType=VARCHAR}, #{kind,jdbcType=VARCHAR},
    #{degree,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="museum.museum.Entity.QuestionSet" keyProperty="qsId" useGeneratedKeys="true">
    insert into QuestionSet
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="qsId != null" >
        qs_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="accuracy != null" >
        accuracy,
      </if>
      <if test="finishTime != null" >
        finish_time,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="kind != null" >
        kind,
      </if>
      <if test="degree != null" >
        degree,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="qsId != null" >
        #{qsId,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="accuracy != null" >
        #{accuracy,jdbcType=DOUBLE},
      </if>
      <if test="finishTime != null" >
        #{finishTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="kind != null" >
        #{kind,jdbcType=VARCHAR},
      </if>
      <if test="degree != null" >
        #{degree,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="museum.museum.Entity.QuestionSetExample" resultType="java.lang.Integer" >
    select count(*) from QuestionSet
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update QuestionSet
    <set >
      <if test="record.qsId != null" >
        qs_id = #{record.qsId,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.accuracy != null" >
        accuracy = #{record.accuracy,jdbcType=DOUBLE},
      </if>
      <if test="record.finishTime != null" >
        finish_time = #{record.finishTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.kind != null" >
        kind = #{record.kind,jdbcType=VARCHAR},
      </if>
      <if test="record.degree != null" >
        degree = #{record.degree,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update QuestionSet
    set qs_id = #{record.qsId,jdbcType=BIGINT},
    user_id = #{record.userId,jdbcType=VARCHAR},
    accuracy = #{record.accuracy,jdbcType=DOUBLE},
    finish_time = #{record.finishTime,jdbcType=TIMESTAMP},
    status = #{record.status,jdbcType=VARCHAR},
    kind = #{record.kind,jdbcType=VARCHAR},
    degree = #{record.degree,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="museum.museum.Entity.QuestionSet" >
    update QuestionSet
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="accuracy != null" >
        accuracy = #{accuracy,jdbcType=DOUBLE},
      </if>
      <if test="finishTime != null" >
        finish_time = #{finishTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="kind != null" >
        kind = #{kind,jdbcType=VARCHAR},
      </if>
      <if test="degree != null" >
        degree = #{degree,jdbcType=INTEGER},
      </if>
    </set>
    where qs_id = #{qsId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="museum.museum.Entity.QuestionSet" >
    update QuestionSet
    set user_id = #{userId,jdbcType=VARCHAR},
    accuracy = #{accuracy,jdbcType=DOUBLE},
    finish_time = #{finishTime,jdbcType=TIMESTAMP},
    status = #{status,jdbcType=VARCHAR},
    kind = #{kind,jdbcType=VARCHAR},
    degree = #{degree,jdbcType=INTEGER}
    where qs_id = #{qsId,jdbcType=BIGINT}
  </update>
</mapper>